-> The youtuber was using ubuntu but I decided to use kali in the same way.
-> Starting with the installation of VIM that is an 'improved' version of VI (visual editor). It can be installed using the command: 'sudo apt install vim
'. These tools are used to write and execute the codes using linux terminals.
-> So now we will see how to use vim to write programs in terminal and what are some advanced functionalities that we can implement in linux.

-> Start writing by entering command: 'vim file_name.txt'.
-> Enter 'i' to add insert mode so that we can write the code in the file.
-> use ':' to enter commands. e.g. ':w' to save the file, ':q' to exit the editor. ':wq' to save and exit.
-> ':syntax on' to enable syntax highlighting and ':number' to enable line number.
-> Now after entering the above commands, we can start writing the c code according to its syntax.
-> Use the following command to compile and execute the c code: 'gcc file_name.c -o output_name'     './output_name'
-> This changes the code in binary hence executing the code directly on CPU.
-> Add '-Wall' at the end of the commands to enable all the warnings.
-> We can enter 'o' instead of 'i' to enter into next line for writing the code.
-> 'echo $!' displays error message of previously executed program.
-> When we write 'env' in the terminal, it gives us the environment variables of the current shell session.
-> Use command 'env | grep USER' which will print the value of environment variable USER. Similarly, we can use other variables as well.
-> If we compile a c program named 'matrix' as '-o', './matrix' will print the output of the compiled program, but if we write './matrix $USER', it will also print the value of the variable USER with the output statement.
-> The reason is that it takes it as input to the char* []argv array in the main function. Following technique is used to map argv in c program:
	Command Line: ~$ ./matrix argument1 argument2
		   in C: 	argv[0]    argv[1]         argv[2]
-> $ is used to read values from the terminal. So we can say that our entire command is an input variable for c program.
-> Similarly, here USER will be treated as a variable. To escape this $, we can use '\'. So the new command will be: './matrix \$USER'. This will print '$USER' rather than printing its value.
-> When we write command 'ls -la', it will show all the hidden files in the current directory. These will be a file '.bashrc'. This file is a script that runs whenever a new terminal session is started in interactive mode. It is used to set up environment variables, aliases and other configurations for the shell. So it contains commands that are executed every time the terminal is opened.
-> You can add the following at the end of this file to automatically execute your specific code script whenever a new terminal is opened:
	'export PATH=$PATH: /path/to/your/script'
	'file_name.ext $USER'
		OR
	'path/to/your/script/file_name.ext $USER'
